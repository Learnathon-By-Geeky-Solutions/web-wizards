name: Deploy to Azure Container Apps

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types: [completed]
    branches: [main, test, ci/cd-pipeline]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      image_tag:
        description: 'Image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string

permissions:
  contents: read
  actions: read  # Required to read workflow run information

env:
  AZURE_RESOURCE_GROUP: web-wizards-rg
  CONTAINER_ENV_NAME: web-wizards-env
  REGISTRY: ghcr.io
  ORGANIZATION: learnathon-by-geeky-solutions
  BACKEND_IMAGE: web-wizards-backend
  OCR_SERVICE_IMAGE: web-wizards-ocr-service
  MYSQL_SERVER_NAME: webwizards-mysql
  MYSQL_DATABASE_NAME: webwizardsdb
  DATABASE_PORT: 3306
  LOCATION: southeastasia

jobs:
  deploy-container-apps:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set image tag from workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        id: set-tag-dispatch
        run: |
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Using image tag from workflow dispatch: $IMAGE_TAG"

      - name: Get triggering workflow artifact
        if: github.event_name == 'workflow_run'
        id: workflow-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ github.event.workflow_run.workflow_id }}
          run_id: ${{ github.event.workflow_run.id }}
          name: image_tag
          path: /tmp/workflow-artifacts
          check_artifacts: false
          search_artifacts: true
          
      - name: Set image tag from workflow run
        if: github.event_name == 'workflow_run'
        id: set-tag-workflow
        run: |
          if [ -f "/tmp/workflow-artifacts/image_tag.txt" ]; then
            IMAGE_TAG=$(cat /tmp/workflow-artifacts/image_tag.txt)
          else
            IMAGE_TAG="latest"
          fi
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Using image tag from workflow run: $IMAGE_TAG"
      
      - name: Combine image tags
        id: set-image-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "image_tag=${{ steps.set-tag-dispatch.outputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${{ steps.set-tag-workflow.outputs.image_tag }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Debug Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run id: ${{ github.event.workflow_run.id }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Image tag to deploy: ${{ steps.set-image-tag.outputs.image_tag }}"
          echo "Full backend image URL: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }}"
          echo "Full OCR service image URL: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }}"
      
      # Backend Container App Update
      - name: Update Backend Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Updating backend container app with image tag: ${{ steps.set-image-tag.outputs.image_tag }}"
            
            # Update existing container app with new image
            az containerapp update \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }}
      
      # OCR Service Container App Update
      - name: Update OCR Service Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Updating OCR service container app with image tag: ${{ steps.set-image-tag.outputs.image_tag }}"
            
            # Check if container app exists with better error handling
            echo "Checking if OCR service container app exists..."
            EXISTS=$(az containerapp show --name ocr-service --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query name 2>/dev/null || echo "false")
            echo "Container app exists check result: $EXISTS"
            
            if [ "$EXISTS" == "false" ]; then
              echo "Creating new OCR service container app"
              az containerapp create \
                --name ocr-service \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --environment ${{ env.CONTAINER_ENV_NAME }} \
                --image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }} \
                --target-port 8000 \
                --ingress external \
                --cpu 0.5 \
                --memory 1.0Gi \
                --min-replicas 1 \
                --max-replicas 3 || echo "Error creating OCR service container app"
            else
              echo "Updating existing OCR service container app"
              az containerapp update \
                --name ocr-service \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }} || echo "Error updating OCR service container app"
            fi
            
            echo "OCR service container app update completed successfully"
      
      - name: Get Backend URL
        id: get-backend-url
        uses: azure/CLI@v1
        with:
          inlineScript: |
            BACKEND_URL=$(az containerapp show \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv)
            
            echo "backend_url=https://$BACKEND_URL" >> $GITHUB_OUTPUT
            echo "Backend URL: https://$BACKEND_URL"
      
      - name: Get OCR Service URL
        id: get-ocr-url
        uses: azure/CLI@v1
        with:
          inlineScript: |
            OCR_URL=$(az containerapp show \
              --name ocr-service \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv)
            
            echo "ocr_url=https://$OCR_URL" >> $GITHUB_OUTPUT
            echo "OCR Service URL: https://$OCR_URL"
      
      - name: Run Migrations
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Run migrations through the container app
            az containerapp exec \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --command "python manage.py migrate"
      
      - name: Restart Container Apps
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Create a new revision to restart the backend app
            az containerapp revision copy \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
            
            # Create a new revision to restart the OCR service app
            az containerapp revision copy \
              --name ocr-service \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
            
            echo "Container apps restarted with new revisions"
      
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Service | URL |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend API | ${{ steps.get-backend-url.outputs.backend_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Admin Panel | ${{ steps.get-backend-url.outputs.backend_url }}/admin/ |" >> $GITHUB_STEP_SUMMARY
          echo "| OCR Service | ${{ steps.get-ocr-url.outputs.ocr_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| OCR API Docs | ${{ steps.get-ocr-url.outputs.ocr_url }}/docs/ |" >> $GITHUB_STEP_SUMMARY
          echo "| Images Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| - Backend: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| - OCR Service: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }} |" >> $GITHUB_STEP_SUMMARY