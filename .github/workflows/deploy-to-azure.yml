name: Deploy to Azure Container Apps

on:
  repository_dispatch:
    types: [trigger-deployment]
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types: [completed]
    branches: [main, test, ci/cd-pipeline]  # Updated to include all branches
  workflow_dispatch:  # Allow manual triggering

env:
  AZURE_RESOURCE_GROUP: web-wizards-rg
  CONTAINER_ENV_NAME: web-wizards-env
  REGISTRY: ghcr.io
  ORGANIZATION: learnathon-by-geeky-solutions
  BACKEND_IMAGE: web-wizards-backend
  OCR_SERVICE_IMAGE: web-wizards-ocr-service
  MYSQL_SERVER_NAME: webwizards-mysql
  MYSQL_DATABASE_NAME: webwizardsdb
  DATABASE_PORT: 3306
  LOCATION: southeastasia

jobs:
  deploy-container-apps:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch' || (github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'test' || github.event.workflow_run.head_branch == 'ci/cd-pipeline')) }}
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set image tag
        id: set-image-tag
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            IMAGE_TAG="${{ github.event.client_payload.image_tag }}"
          else
            # Default to latest if not specified
            IMAGE_TAG="latest"
          fi
          echo "Using image tag: $IMAGE_TAG"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Extract secrets from JSON
        id: extract-secrets
        run: |
          # Extract all secrets from the APP_SECRETS JSON
          APP_SECRETS='${{ secrets.APP_SECRETS }}'
          
          # Extract individual values without fallbacks
          MYSQL_USERNAME=$(echo $APP_SECRETS | jq -r '.MYSQL_ADMIN_USERNAME')
          MYSQL_PASSWORD=$(echo $APP_SECRETS | jq -r '.MYSQL_ADMIN_PASSWORD')
          DJANGO_SECRET=$(echo $APP_SECRETS | jq -r '.DJANGO_SECRET_KEY')
          CLOUDINARY_NAME=$(echo $APP_SECRETS | jq -r '.CLOUDINARY_CLOUD_NAME')
          CLOUDINARY_KEY=$(echo $APP_SECRETS | jq -r '.CLOUDINARY_API_KEY')
          CLOUDINARY_SECRET=$(echo $APP_SECRETS | jq -r '.CLOUDINARY_API_SECRET')
          EMAIL_USER=$(echo $APP_SECRETS | jq -r '.EMAIL_HOST_USER')
          EMAIL_PASSWORD=$(echo $APP_SECRETS | jq -r '.EMAIL_HOST_PASSWORD')
          SENTRY_DSN_VAL=$(echo $APP_SECRETS | jq -r '.SENTRY_DSN')
          CORS_ORIGIN_VAL=$(echo $APP_SECRETS | jq -r '.CORS_ORIGIN')
          OPENAI_API_KEY=$(echo $APP_SECRETS | jq -r '.OPENAI_API_KEY')
          GEMINI_API_KEY=$(echo $APP_SECRETS | jq -r '.GEMINI_API_KEY')
          GOOGLE_API_KEY=$(echo $APP_SECRETS | jq -r '.GOOGLE_API_KEY')
          GEMINI_MODEL=$(echo $APP_SECRETS | jq -r '.GEMINI_MODEL')
          GOOGLE_MODEL=$(echo $APP_SECRETS | jq -r '.GOOGLE_MODEL')
          
          # Set output variables
          echo "mysql_username=$MYSQL_USERNAME" >> $GITHUB_OUTPUT
          echo "mysql_password=$MYSQL_PASSWORD" >> $GITHUB_OUTPUT
          echo "django_secret=$DJANGO_SECRET" >> $GITHUB_OUTPUT
          echo "cloudinary_name=$CLOUDINARY_NAME" >> $GITHUB_OUTPUT
          echo "cloudinary_key=$CLOUDINARY_KEY" >> $GITHUB_OUTPUT
          echo "cloudinary_secret=$CLOUDINARY_SECRET" >> $GITHUB_OUTPUT
          echo "email_user=$EMAIL_USER" >> $GITHUB_OUTPUT
          echo "email_password=$EMAIL_PASSWORD" >> $GITHUB_OUTPUT
          echo "sentry_dsn=$SENTRY_DSN_VAL" >> $GITHUB_OUTPUT
          echo "cors_origin=$CORS_ORIGIN_VAL" >> $GITHUB_OUTPUT
          echo "openai_api_key=$OPENAI_API_KEY" >> $GITHUB_OUTPUT
          echo "gemini_api_key=$GEMINI_API_KEY" >> $GITHUB_OUTPUT
          echo "google_api_key=$GOOGLE_API_KEY" >> $GITHUB_OUTPUT
          echo "gemini_model=$GEMINI_MODEL" >> $GITHUB_OUTPUT
          echo "google_model=$GOOGLE_MODEL" >> $GITHUB_OUTPUT
          
      - name: Debug Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Image tag to deploy: ${{ steps.set-image-tag.outputs.image_tag }}"
          echo "Full backend image URL: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }}"
          echo "Full OCR service image URL: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }}"
      
      # Backend Container App Update
      - name: Update Backend Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Updating backend container app with image tag: ${{ steps.set-image-tag.outputs.image_tag }}"
            
            # Update existing container app with new image
            az containerapp update \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }}

            # Update environment variables to ensure proper configuration
            az containerapp update \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --set-env-vars \
                ENVIRONMENT=production \
                DATABASE_ENGINE=django.db.backends.mysql \
                DATABASE_HOST=${{ env.MYSQL_SERVER_NAME }}.mysql.database.azure.com \
                DATABASE_NAME=${{ env.MYSQL_DATABASE_NAME }} \
                DATABASE_USER=${{ steps.extract-secrets.outputs.mysql_username }} \
                DATABASE_PASSWORD=${{ steps.extract-secrets.outputs.mysql_password }} \
                DATABASE_PORT=${{ env.DATABASE_PORT }} \
                SECRET_KEY=${{ steps.extract-secrets.outputs.django_secret }} \
                REDIS_URL=none \
                DEBUG=False \
                ALLOWED_HOSTS="*.azurecontainerapps.io,*.azurewebsites.net" \
                CORS_ORIGIN=${{ steps.extract-secrets.outputs.cors_origin }} \
                CLOUDINARY_CLOUD_NAME=${{ steps.extract-secrets.outputs.cloudinary_name }} \
                CLOUDINARY_API_KEY=${{ steps.extract-secrets.outputs.cloudinary_key }} \
                CLOUDINARY_API_SECRET=${{ steps.extract-secrets.outputs.cloudinary_secret }} \
                SENTRY_DSN=${{ steps.extract-secrets.outputs.sentry_dsn }} \
                SENTRY_ENVIRONMENT=production \
                EMAIL_HOST=smtp.gmail.com \
                EMAIL_PORT=587 \
                EMAIL_USE_TLS=True \
                EMAIL_HOST_USER=${{ steps.extract-secrets.outputs.email_user }} \
                EMAIL_HOST_PASSWORD=${{ steps.extract-secrets.outputs.email_password }} \
                DEFAULT_FROM_EMAIL="AmarHealth <${{ steps.extract-secrets.outputs.email_user }}>" \
                DJANGO_LOG_LEVEL=INFO
      
      # OCR Service Container App Update
      - name: Update OCR Service Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Updating OCR service container app with image tag: ${{ steps.set-image-tag.outputs.image_tag }}"
            
            # Check if container app exists, create if not exists
            EXISTS=$(az containerapp show --name ocr-service --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query name 2>/dev/null || echo "false")
            
            if [ "$EXISTS" == "false" ]; then
              echo "Creating new OCR service container app"
              az containerapp create \
                --name ocr-service \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --environment ${{ env.CONTAINER_ENV_NAME }} \
                --image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }} \
                --target-port 8000 \
                --ingress external \
                --query properties.configuration.ingress.fqdn
            else
              echo "Updating existing OCR service container app"
              az containerapp update \
                --name ocr-service \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }}
            fi
            
            # Update environment variables for OCR service
            az containerapp update \
              --name ocr-service \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --set-env-vars \
                DEBUG=False \
                OPENAI_API_KEY=${{ steps.extract-secrets.outputs.openai_api_key }} \
                GEMINI_API_KEY=${{ steps.extract-secrets.outputs.gemini_api_key }} \
                GEMINI_MODEL=${{ steps.extract-secrets.outputs.gemini_model }} \
                GOOGLE_API_KEY=${{ steps.extract-secrets.outputs.google_api_key }} \
                GOOGLE_MODEL=${{ steps.extract-secrets.outputs.google_model }} \
                USE_AI_PROCESSING=True \
                PORT=8000
      
      - name: Get Backend URL
        id: get-backend-url
        uses: azure/CLI@v1
        with:
          inlineScript: |
            BACKEND_URL=$(az containerapp show \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv)
            
            echo "backend_url=https://$BACKEND_URL" >> $GITHUB_OUTPUT
            echo "Backend URL: https://$BACKEND_URL"
      
      - name: Get OCR Service URL
        id: get-ocr-url
        uses: azure/CLI@v1
        with:
          inlineScript: |
            OCR_URL=$(az containerapp show \
              --name ocr-service \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv)
            
            echo "ocr_url=https://$OCR_URL" >> $GITHUB_OUTPUT
            echo "OCR Service URL: https://$OCR_URL"
      
      - name: Run Migrations
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Run migrations through the container app
            az containerapp exec \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --command "python manage.py migrate"
      
      - name: Restart Container Apps
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Create a new revision to restart the backend app
            az containerapp revision copy \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
            
            # Create a new revision to restart the OCR service app
            az containerapp revision copy \
              --name ocr-service \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
            
            echo "Container apps restarted with new revisions"
      
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Service | URL |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend API | ${{ steps.get-backend-url.outputs.backend_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Admin Panel | ${{ steps.get-backend-url.outputs.backend_url }}/admin/ |" >> $GITHUB_STEP_SUMMARY
          echo "| OCR Service | ${{ steps.get-ocr-url.outputs.ocr_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| OCR API Docs | ${{ steps.get-ocr-url.outputs.ocr_url }}/docs/ |" >> $GITHUB_STEP_SUMMARY
          echo "| Images Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| - Backend: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| - OCR Service: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ steps.set-image-tag.outputs.image_tag }} |" >> $GITHUB_STEP_SUMMARY