name: Build and Push Docker Images

on:
  push:
    branches: [main, test, ci/cd-pipeline]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [main, test, ci/cd-pipeline]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  ORGANIZATION: learnathon-by-geeky-solutions # using lowercase for Docker compatibility
  BACKEND_IMAGE: web-wizards-backend
  OCR_SERVICE_IMAGE: web-wizards-ocr-service
  AZURE_RESOURCE_GROUP: web-wizards-rg
  MYSQL_SERVER_NAME: webwizards-mysql
  MYSQL_DATABASE_NAME: webwizardsdb
  CONTAINER_ENV_NAME: web-wizards-env

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate image tag
        id: set-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "image_tag=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "Generated image tag: ${SHORT_SHA}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ steps.set-tag.outputs.image_tag }}
            ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push OCR service image
        uses: docker/build-push-action@v4
        with:
          context: ./ocr_service
          file: ./ocr_service/Dockerfile.prod
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ steps.set-tag.outputs.image_tag }}
            ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image Build Summary
        run: |
          echo "## Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Registry | Tags | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }} | ${{ steps.set-tag.outputs.image_tag }}, latest | ✅ Built & Pushed |" >> $GITHUB_STEP_SUMMARY
          echo "| OCR Service | ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }} | ${{ steps.set-tag.outputs.image_tag }}, latest | ✅ Built & Pushed |" >> $GITHUB_STEP_SUMMARY
          
  deploy-to-azure:
    name: Deploy to Azure
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test' || github.ref == 'refs/heads/ci/cd-pipeline' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Debug Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Image tag to deploy: ${{ needs.build-and-push.outputs.image_tag }}"
          echo "Full backend image URL: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ needs.build-and-push.outputs.image_tag }}"
          echo "Full OCR service image URL: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ needs.build-and-push.outputs.image_tag }}"
      
      - name: Update Backend Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Updating backend container app with image tag: ${{ needs.build-and-push.outputs.image_tag }}"
            
            # Update existing container app with new image
            az containerapp update \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ needs.build-and-push.outputs.image_tag }}
      
      # Debug before OCR service step
      - name: Debug Before OCR Service
        run: |
          echo "==== DEBUG INFO BEFORE OCR SERVICE STEP ===="
          echo "Current branch: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "About to execute OCR service steps"
      
      - name: Update OCR Service Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Updating OCR service container app with image tag: ${{ needs.build-and-push.outputs.image_tag }}"
            
            # Check if container app exists with better error handling
            echo "Checking if OCR service container app exists..."
            EXISTS=$(az containerapp show --name ocr-service --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query name 2>/dev/null || echo "false")
            echo "Container app exists check result: $EXISTS"
            
            if [ "$EXISTS" == "false" ]; then
              echo "Creating new OCR service container app"
              az containerapp create \
                --name ocr-service \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --environment ${{ env.CONTAINER_ENV_NAME }} \
                --image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ needs.build-and-push.outputs.image_tag }} \
                --target-port 8000 \
                --ingress external \
                --cpu 0.5 \
                --memory 1.0Gi \
                --min-replicas 1 \
                --max-replicas 3 || echo "Error creating OCR service container app"
            else
              echo "Updating existing OCR service container app"
              az containerapp update \
                --name ocr-service \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ needs.build-and-push.outputs.image_tag }} || echo "Error updating OCR service container app"
            fi
            
            # Force the container app to use port 8000 for ingress
            echo "Updating OCR service container app ingress settings..."
            az containerapp ingress update \
              --name ocr-service \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --target-port 8000 \
              --external \
              --allow-insecure false || echo "Error updating OCR service ingress settings"
            
            echo "OCR service container app update completed successfully"
      
      # Debug after OCR service step
      - name: Debug After OCR Service
        run: |
          echo "==== DEBUG INFO AFTER OCR SERVICE STEP ===="
          echo "OCR service step completed"
          echo "Moving to next steps"
          
      - name: Get OCR Service URL
        id: get-ocr-url
        uses: azure/CLI@v1
        with:
          inlineScript: |
            OCR_URL=$(az containerapp show \
              --name ocr-service \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv)
            
            echo "ocr_url=https://$OCR_URL" >> $GITHUB_OUTPUT
            echo "OCR Service URL: https://$OCR_URL"
      
      - name: Restart Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Create a new revision to restart the backend app
            az containerapp revision copy \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
            
            # Create a new revision to restart the OCR service app
            az containerapp revision copy \
              --name ocr-service \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
            
            echo "Container apps restarted with new revisions"
      
      - name: Get Backend URL
        id: get-url
        uses: azure/CLI@v1
        with:
          inlineScript: |
            BACKEND_URL=$(az containerapp show \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv)
            
            echo "backend_url=https://$BACKEND_URL" >> $GITHUB_OUTPUT
            echo "Backend URL: https://$BACKEND_URL"
      
      - name: Verify Deployment
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Verify that the correct image was deployed
            DEPLOYED_IMAGE=$(az containerapp show \
              --name web-wizards-backend \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query "properties.template.containers[0].image" \
              -o tsv)
            
            EXPECTED_IMAGE="${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ needs.build-and-push.outputs.image_tag }}"
            
            echo "Deployed image: $DEPLOYED_IMAGE"
            echo "Expected image: $EXPECTED_IMAGE"
            
            if [[ "$DEPLOYED_IMAGE" == "$EXPECTED_IMAGE" ]]; then
              echo "✅ Deployment successful! The correct image is deployed."
            else
              echo "❌ Deployment verification failed. The deployed image does not match the expected image."
              exit 1
            fi
                  
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Service | URL |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend API | ${{ steps.get-url.outputs.backend_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Admin Panel | ${{ steps.get-url.outputs.backend_url }}/admin/ |" >> $GITHUB_STEP_SUMMARY
          echo "| OCR Service | ${{ steps.get-ocr-url.outputs.ocr_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| OCR API Docs | ${{ steps.get-ocr-url.outputs.ocr_url }}/docs/ |" >> $GITHUB_STEP_SUMMARY
          echo "| Images Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| - Backend: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.BACKEND_IMAGE }}:${{ needs.build-and-push.outputs.image_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| - OCR Service: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.OCR_SERVICE_IMAGE }}:${{ needs.build-and-push.outputs.image_tag }} |" >> $GITHUB_STEP_SUMMARY