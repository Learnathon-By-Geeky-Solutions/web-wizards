name: Backend Deployment for Production

on:
  workflow_run:
    workflows: ["Database Migrations for Production"]
    types: [completed]
    branches: [main]  # Only run on the main branch
  workflow_dispatch: # Allow manual triggering

env:
  AZURE_RESOURCE_GROUP: web-wizards-rg
  BACKEND_APP_NAME: web-wizards-backend
  CONTAINER_REGISTRY: ghcr.io/${{ github.repository_owner }}
  MYSQL_SERVER_NAME: web-wizards-mysql
  MYSQL_DATABASE_NAME: webwizardsdb
  ENVIRONMENT: production
  AZURE_REGION: southeastasia  # Updated for Bangladesh users

jobs:
  check-migration-status:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Check migration status
        run: echo "Migrations completed successfully or manual trigger activated. Proceeding with backend deployment."

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-migration-status
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Django backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/web-wizards-backend:${{ github.sha }}
            ${{ env.CONTAINER_REGISTRY }}/web-wizards-backend:latest
          build-args: |
            ENVIRONMENT=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-backend:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Setup Container Apps Environment
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Create Container Apps Environment if not exists
            ENVIRONMENT_NAME="${{ env.AZURE_RESOURCE_GROUP }}-env"
            az containerapp env show \
              --name $ENVIRONMENT_NAME \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} || \
            az containerapp env create \
              --name $ENVIRONMENT_NAME \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location ${{ env.AZURE_REGION }}
      
      - name: Deploy backend to Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Get the environment name
            ENVIRONMENT_NAME="${{ env.AZURE_RESOURCE_GROUP }}-env"
            
            # Check if container app already exists
            az containerapp show \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} && \
            # Update existing container app
            az containerapp update \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.CONTAINER_REGISTRY }}/web-wizards-backend:${{ github.sha }} \
              || \
            # Create new container app if it doesn't exist
            az containerapp create \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment $ENVIRONMENT_NAME \
              --image ${{ env.CONTAINER_REGISTRY }}/web-wizards-backend:${{ github.sha }} \
              --registry-server ghcr.io \
              --registry-username ${{ github.actor }} \
              --registry-password ${{ secrets.GITHUB_TOKEN }} \
              --target-port 8000 \
              --ingress external \
              --cpu 0.25 \
              --memory 0.5Gi \
              --min-replicas 0 \
              --max-replicas 1 \
              --scale-rule-name http-scale-rule \
              --scale-rule-http-concurrency 10 \
              --scale-rule-http-cooldown-period 60
      
      - name: Configure Environment Variables
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Set environment variables
            az containerapp update \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --set-env-vars \
                DATABASE_HOST=${{ env.MYSQL_SERVER_NAME }}.mysql.database.azure.com \
                DATABASE_NAME=${{ env.MYSQL_DATABASE_NAME }} \
                DATABASE_USER=${{ secrets.MYSQL_ADMIN_USERNAME }} \
                DATABASE_PASSWORD=${{ secrets.MYSQL_ADMIN_PASSWORD }} \
                SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} \
                DEBUG=False \
                ALLOWED_HOSTS="*" \
                ENVIRONMENT=production \
                DJANGO_SETTINGS_MODULE=core.settings

  verify-deployment:
    needs: deploy-backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Get Container App URL
        uses: azure/CLI@v1
        id: app-url
        with:
          inlineScript: |
            URL=$(az containerapp show \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv)
            echo "APP_URL=https://$URL" >> $GITHUB_OUTPUT
      
      - name: Verify Deployment
        run: |
          echo "Waiting for application to be ready..."
          sleep 30
          # Simple health check (adjust endpoint as needed)
          curl -f -s https://${{ steps.app-url.outputs.APP_URL }}/api/health/ || \
          curl -f -s https://${{ steps.app-url.outputs.APP_URL }}/health/ || \
          curl -f -s https://${{ steps.app-url.outputs.APP_URL }}/ || \
          (echo "Health check failed"; exit 1)
          
          echo "Backend successfully deployed and verified at https://${{ steps.app-url.outputs.APP_URL }}"