# Generated by Django 5.1.5 on 2025-04-12 16:05

import cloudinary.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('medical_records', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('generic_name', models.CharField(blank=True, max_length=255, null=True)),
                ('brand_name', models.CharField(blank=True, max_length=255, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('dosage_form', models.CharField(choices=[('tablet', 'Tablet'), ('capsule', 'Capsule'), ('liquid', 'Liquid'), ('injection', 'Injection'), ('cream', 'Cream'), ('ointment', 'Ointment'), ('inhaler', 'Inhaler'), ('drops', 'Drops'), ('powder', 'Powder'), ('other', 'Other')], max_length=50)),
                ('strength', models.CharField(help_text='e.g., 500mg, 50ml, etc.', max_length=100)),
                ('unit', models.CharField(choices=[('mg', 'Milligram'), ('g', 'Gram'), ('ml', 'Milliliter'), ('mcg', 'Microgram'), ('IU', 'International Unit'), ('other', 'Other')], max_length=20)),
                ('category', models.CharField(choices=[('analgesic', 'Analgesic'), ('antibiotic', 'Antibiotic'), ('antiviral', 'Antiviral'), ('antihistamine', 'Antihistamine'), ('antihypertensive', 'Antihypertensive'), ('antidiabetic', 'Antidiabetic'), ('antiinflammatory', 'Anti-inflammatory'), ('vitamin', 'Vitamin'), ('supplement', 'Supplement'), ('other', 'Other')], max_length=100)),
                ('contraindications', models.TextField(blank=True, null=True)),
                ('side_effects', models.TextField(blank=True, null=True)),
                ('storage_instructions', models.CharField(blank=True, max_length=255, null=True)),
                ('is_prescription_required', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='medications_name_0c05c3_idx'), models.Index(fields=['generic_name'], name='medications_generic_f50273_idx'), models.Index(fields=['brand_name'], name='medications_brand_n_7fa3be_idx'), models.Index(fields=['category'], name='medications_categor_d82bd0_idx'), models.Index(fields=['is_active'], name='medications_is_acti_ebfb5f_idx')],
            },
        ),
        migrations.CreateModel(
            name='MedicationPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('custom_medication_name', models.CharField(blank=True, help_text='Used when medication is not in database', max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('instructions', models.TextField(blank=True, help_text='Instructions for taking the medication', null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Active', max_length=10)),
                ('effective_date', models.DateField()),
                ('effective_time', models.TimeField()),
                ('schedule_type', models.CharField(choices=[('when_needed', 'When Needed'), ('every_x_days', 'Every X Days'), ('daily', 'Daily'), ('specific_days', 'Specific Days'), ('cycle', 'Take X Days, Rest Y Days')], max_length=20)),
                ('frequency_days', models.PositiveIntegerField(default=1, help_text="For 'Every X Days' schedule")),
                ('specific_days', models.CharField(blank=True, help_text="Comma-separated days of week (e.g., 'Mon,Wed,Fri')", max_length=100, null=True)),
                ('cycle_active_days', models.PositiveIntegerField(default=0, help_text='Days to take medication in cycle')),
                ('cycle_rest_days', models.PositiveIntegerField(default=0, help_text='Days to rest in cycle')),
                ('dose_amount', models.CharField(help_text="e.g., '10mg', '1 tablet'", max_length=100)),
                ('times_per_day', models.PositiveIntegerField(default=1)),
                ('end_date', models.DateField(blank=True, help_text='Leave blank if ongoing', null=True)),
                ('notification_time', models.PositiveIntegerField(choices=[(0, 'No notification'), (5, '5 minutes before'), (10, '10 minutes before'), (15, '15 minutes before'), (30, '30 minutes before'), (60, '1 hour before'), (120, '2 hours before'), (1440, '1 day before')], default=30, help_text='When to send notification before medication time')),
                ('notifications_enabled', models.BooleanField(default=True, help_text='Whether notifications are enabled for this medication plan')),
                ('notes', models.TextField(blank=True, null=True)),
                ('health_issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medication_plans', to='medical_records.healthissue')),
                ('medication', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plans', to='medications.medication')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medication_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MedicationNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('remind_before_minutes', models.PositiveIntegerField(choices=[(5, '5 minutes before'), (10, '10 minutes before'), (15, '15 minutes before'), (30, '30 minutes before'), (60, '1 hour before'), (120, '2 hours before'), (1440, '1 day before')], default=30, help_text='How many minutes before medication time to send notification')),
                ('scheduled_time', models.DateTimeField(help_text='When the notification is scheduled to be sent')),
                ('notification_time', models.DateTimeField(blank=True, help_text='When the notification was actually sent', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('read', 'Read'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('message', models.TextField(help_text='The notification message')),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this notification is enabled')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medication_notifications', to=settings.AUTH_USER_MODEL)),
                ('medication_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='medications.medicationplan')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MedicationTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('time', models.TimeField(help_text='The time to take this medication')),
                ('day_of_week', models.IntegerField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of week for specific day schedules', null=True)),
                ('is_daily', models.BooleanField(default=False, help_text='Whether this time applies to every day')),
                ('is_active_cycle_day', models.BooleanField(default=True, help_text='Whether this time is for active cycle days or rest days')),
                ('day_in_cycle', models.PositiveIntegerField(blank=True, help_text="The day in the cycle (1-based) for 'every X days' schedule", null=True)),
                ('dose_override', models.CharField(blank=True, help_text='Override dose for this specific time if different from plan', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('medication_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medication_times', to='medications.medicationplan')),
            ],
            options={
                'ordering': ['time'],
            },
        ),
    ]
