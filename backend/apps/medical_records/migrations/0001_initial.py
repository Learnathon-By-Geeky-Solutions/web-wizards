# Generated by Django 5.1.5 on 2025-04-08 03:30

import cloudinary.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HealthIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('monitoring', 'Monitoring')], default='active', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_issues', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Health Issue',
                'verbose_name_plural': 'Health Issues',
                'ordering': ['-start_date', '-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('document_type', models.CharField(choices=[('prescription', 'Prescription'), ('medical_report', 'Medical Report'), ('imaging', 'Imaging'), ('discharge_summary', 'Discharge Summary'), ('other', 'Other')], max_length=20)),
                ('document_date', models.DateField()),
                ('description', models.TextField(blank=True)),
                ('file', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='document')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL)),
                ('health_issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='medical_records.healthissue')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-document_date'],
            },
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chart_type', models.CharField(choices=[('blood_pressure', 'Blood Pressure'), ('blood_sugar', 'Blood Sugar'), ('weight', 'Weight'), ('temperature', 'Temperature'), ('heart_rate', 'Heart Rate'), ('oxygen_saturation', 'Oxygen Saturation'), ('respiratory_rate', 'Respiratory Rate'), ('height', 'Height'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('measurement_date', models.DateField()),
                ('measurement_time', models.TimeField()),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charts', to=settings.AUTH_USER_MODEL)),
                ('health_issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='charts', to='medical_records.healthissue')),
            ],
            options={
                'verbose_name': 'Chart Data',
                'verbose_name_plural': 'Chart Data',
                'ordering': ['-measurement_date', '-measurement_time'],
            },
        ),
        migrations.CreateModel(
            name='LabResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('test_name', models.CharField(max_length=255)),
                ('test_date', models.DateField()),
                ('result', models.TextField()),
                ('reference_range', models.CharField(blank=True, max_length=255)),
                ('lab_name', models.CharField(blank=True, max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('health_issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lab_results', to='medical_records.healthissue')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_results', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Lab Result',
                'verbose_name_plural': 'Lab Results',
                'ordering': ['-test_date'],
            },
        ),
        migrations.CreateModel(
            name='CBCTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hemoglobin', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hemoglobin (g/dL)')),
                ('hematocrit', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hematocrit (%)')),
                ('red_blood_cells', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Red Blood Cells (10^6/μL)')),
                ('mcv', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Mean Corpuscular Volume (fL)')),
                ('mch', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Mean Corpuscular Hemoglobin (pg)')),
                ('mchc', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Mean Corpuscular Hemoglobin Concentration (g/dL)')),
                ('rdw', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Red Cell Distribution Width (%)')),
                ('white_blood_cells', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='White Blood Cells (10^3/μL)')),
                ('neutrophils_percent', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Neutrophils (%)')),
                ('lymphocytes_percent', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Lymphocytes (%)')),
                ('monocytes_percent', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Monocytes (%)')),
                ('eosinophils_percent', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Eosinophils (%)')),
                ('basophils_percent', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Basophils (%)')),
                ('neutrophils_absolute', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Neutrophils (10^3/μL)')),
                ('lymphocytes_absolute', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Lymphocytes (10^3/μL)')),
                ('monocytes_absolute', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Monocytes (10^3/μL)')),
                ('eosinophils_absolute', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Eosinophils (10^3/μL)')),
                ('basophils_absolute', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Basophils (10^3/μL)')),
                ('platelets', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Platelets (10^3/μL)')),
                ('mpv', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Mean Platelet Volume (fL)')),
                ('reference_ranges', models.JSONField(blank=True, default=dict, help_text='Reference ranges for CBC parameters')),
                ('lab_result', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cbc_details', to='medical_records.labresult')),
            ],
            options={
                'verbose_name': 'CBC Test Result',
                'verbose_name_plural': 'CBC Test Results',
            },
        ),
        migrations.CreateModel(
            name='LogbookEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry_date', models.DateField()),
                ('entry_time', models.TimeField()),
                ('title', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('health_issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logbook_entries', to='medical_records.healthissue')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logbook_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Logbook Entry',
                'verbose_name_plural': 'Logbook Entries',
                'ordering': ['-entry_date', '-entry_time'],
            },
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], default='mild', max_length=10)),
                ('recorded_date', models.DateField()),
                ('recorded_time', models.TimeField()),
                ('duration', models.CharField(blank=True, help_text="e.g., '2 hours', '3 days'", max_length=100)),
                ('health_issue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='symptoms', to='medical_records.healthissue')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='symptoms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Symptom',
                'verbose_name_plural': 'Symptoms',
                'ordering': ['-recorded_date', '-recorded_time'],
            },
        ),
        migrations.CreateModel(
            name='URETestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sodium', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Sodium (mmol/L)')),
                ('potassium', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Potassium (mmol/L)')),
                ('chloride', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Chloride (mmol/L)')),
                ('bicarbonate', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Bicarbonate (mmol/L)')),
                ('urea', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Urea (mmol/L)')),
                ('creatinine', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Creatinine (μmol/L)')),
                ('egfr', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='eGFR (mL/min/1.73m²)')),
                ('calcium', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Calcium (mmol/L)')),
                ('phosphate', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Phosphate (mmol/L)')),
                ('magnesium', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Magnesium (mmol/L)')),
                ('uric_acid', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Uric Acid (μmol/L)')),
                ('glucose', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Glucose (mmol/L)')),
                ('reference_ranges', models.JSONField(blank=True, default=dict, help_text='Reference ranges for URE parameters')),
                ('lab_result', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ure_details', to='medical_records.labresult')),
            ],
            options={
                'verbose_name': 'URE Test Result',
                'verbose_name_plural': 'URE Test Results',
            },
        ),
    ]
